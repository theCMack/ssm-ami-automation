AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates lambda function to trigger SSM automation and allows it to be invoked by SNS"
Parameters:
  WindowsNewAMITopicARN:
    Description: "Windows New AMI SNS topic ARN"
    Type: "String"
#    Default: "arn:aws:sns:us-east-1:801119661308:ec2-windows-ami-update"
    Default: "arn:aws:sns:us-east-1:829829645734:SNSWindows" #created for testing
  AMIeLambdaRoleARN:
    Description: "Lambda role ARN"
    Type: "String"
  AMIeSSMRoleARN:
    Description: "SSM role ARN"
    Type: "String"
  Windows2016SQL2017STDSSMAutomationDocument:
    Description: "Automation document name"
    Type: "String"
Outputs:
    Windows2016SQL2017STDSSMLambdaARN:
      Value: !GetAtt "Windows2016SQL2017STDSSMLambda.Arn"
Resources:
  Windows2016SQL2017STDSSMLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.lambda_handler"
      Runtime: "python2.7"
      Role: !Ref "AMIeLambdaRoleARN"
      Timeout: 300
      Environment:
        Variables:
          DocumentName: !Ref "Windows2016SQL2017STDSSMAutomationDocument"
          AutomationAssumeRoleARN: !Ref "AMIeSSMRoleARN"
      Code:
        ZipFile: |
          import os
          import boto3
          import logging
          import operator
          from datetime import datetime
          def lambda_handler(event, context):
            logger = logging.getLogger(__name__)
            logger.addHandler(logging.StreamHandler())
            logger.setLevel(logging.INFO)
            ec2_client = boto3.client('ec2')
            ssm_client = boto3.client('ssm')
            response = ec2_client.describe_images(Owners=['amazon'], Filters=[{'Name': 'name', 'Values': ['Windows_Server-2016-English-Full-SQL_2017_Standard-????.??.??']}])
            images = [{'ImageId':image['ImageId'], 'CreationDate': datetime.strptime(image['CreationDate'], '%Y-%m-%dT%H:%M:%S.%fZ')} for image in response['Images']]
            images = sorted(images, reverse=True, key=operator.itemgetter('CreationDate'))
            ami_id = images[0]['ImageId']
            logger.info("ami-id: {}".format(ami_id))
            response = ssm_client.start_automation_execution(DocumentName=os.environ['DocumentName'],
              Parameters={'Windows2016SQL2017STDSourceAmiId': [ami_id,], 'AutomationAssumeRoleARN': [os.environ['AutomationAssumeRoleARN'],]}
            )
            logger.info(response)
  SSMLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt "Windows2016SQL2017STDSSMLambda.Arn"
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref "WindowsNewAMITopicARN"
